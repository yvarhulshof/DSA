
1.Mark all nodes unvisited. Create a set of all the unvisited nodes called the unvisited set.

2.Assign to every node a tentative distance value: set it to zero for our initial node and to infinity for
all other nodes. Set the initial node as current.

3.For the current node, consider all of its unvisited neighbors and calculate their tentative distances through the
current node. Compare the newly calculated tentative distance to the current assigned
value and assign the smaller one. For example, if the current node A is marked with a distance of 6,
and the edge connecting it with a neighbor B has length 2, then the distance to B through A will be 6 + 2 = 8.
If B was previously marked with a distance greater than 8 then change it to 8. Otherwise, keep the current value.

4.When we are done considering all of the neighbors of the current node, mark the current node as visited
and remove it from the unvisited set. A visited nodes will never be checked again.

5.Move to the next unvisited node with the smallest tentative distances
and repeat the above steps which check neighbors and mark visited.

6.If the destination node has been marked visited (when planning a route between two specific nodes)
or if the smallest tentative distance among the nodes in the unvisited set is infinity
(when planning a complete traversal; occurs when there is no connection between the initial
node and remaining unvisited nodes), then stop. The algorithm has finished.

7.Otherwise, select the unvisited node that is marked with the smallest tentative distance,
set it as the new "current node", and go back to step 3.


 1  function Dijkstra(Graph, source):
 2
 3      create vertex set Q
 4
 5      for each vertex v in Graph:             // Initialization
 6          dist[v] ← INFINITY                  // Unknown distance from source to v
 7          prev[v] ← UNDEFINED                 // Previous node in optimal path from source
 8          add v to Q                          // All nodes initially in Q (unvisited nodes)
 9
10      dist[source] ← 0                        // Distance from source to source
11
12      while Q is not empty:
13          u ← vertex in Q with min dist[u]    // Node with the least distance
14                                                      // will be selected first
15          remove u from Q
16
17          for each neighbor v of u:           // where v is still in Q.
18              alt ← dist[u] + length(u, v)
19              if alt < dist[v]:               // A shorter path to v has been found
20                  dist[v] ← alt
21                  prev[v] ← u
22
23      return dist[], prev[]
